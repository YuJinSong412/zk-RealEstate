❯ cd test
❯ make
make BUILD_TYPE=debug all 

Target : darwin
Installation directories :
        Openssl  : /opt/homebrew/Cellar/openssl@3/3.0.8
        GMP      : /opt/homebrew/Cellar/gmp/6.2.1_1
        OMP      : /opt/homebrew/Cellar/libomp/15.0.7
        OPENJDK  : /opt/homebrew/Cellar/openjdk@11/11.0.18


source /Users/mangoo/Documents/LibSNARK_C-/test/../build_workspace/test/../darwin_path.info ; \
        clang++ -Wall -Wextra -Wfatal-errors -stdlib=libc++ -std=c++11  -O2 -g  \
        test.cpp  \
        -I../ -I../depends/CircuitBuilder  -I../depends/json_tree -I${GMP}/include -I${OpenSSL}/include -I${OMP}/include -I${OpenJDK}/include \
        -flto -fPIC  \
        ../lib/darwin_debug/lib/libSnark.a  \
        -L${OpenSSL}/lib -L${GMP}/lib -L${OMP}/lib \
        -lgmp -lgmpxx -lssl -lcrypto  -lc++ -lomp -ldl -lpthread \
        -o /Users/mangoo/Documents/LibSNARK_C-/test/../build_workspace/test/test.debug
ld: warning: dylib (/opt/homebrew/Cellar/libomp/15.0.7/lib/libomp.dylib) was built for newer macOS version (13.0) than being linked (12.3)

/Users/mangoo/Documents/LibSNARK_C-/test/../build_workspace/test/test.debug RealEstate 32


 Embedded Circuits :
    DID
    NFID
    RealEstate
    Register
    Tally
    Vote
    ZKlay
    zkzkRollup

  <<<< 1 , success : using embedded [RealEstate] circuit generator >>>> 



BuildCircuit  :
Context_ID    : 1
Circuit Name  : RealEstate
Circuit Args  : 
    hashType : MiMC7 
    treeHeight : 32 
Running Circuit Generator for < RealEstate >

Embedded Circuit [RealEstate] Generation Done 
    Constraints     : 4626 
    Input Wires     : 4 
    Output Wires    : 0 
    Witness Wires   : 15 
    List of primary inputs to assign : 
                - CT_SKE_bondBalance 
                - H_monthlyRepaymentTable 
                - bondBalance 
                - bondKey 
                - cnt 
                - r_CT_SKE_bondBalance 
                - monthlyRepaymentTable , 12 
        ----------------------------------
Deallocate 0 Operators , 0 Wires 
create circuit reader 
numInputs:4 , numOutputs:0 , numNizkInputs:15 
Translating Constraints 
Translating Constraints : Done 
get constraint system 
Evaluate Inputs Done : Full Assignments:4641 ,  Primary Inputs:4 , Auxiliary Inputs:4637 
BuildCircuit  : Done


Build Circuit Profiling Info : 

(enter) Build Circuit                           [             ] (0.0000s x1.02 from start)
  (enter) Create Embedded Circuit               [             ] (0.0000s x0.98 from start)
  (leave) Create Embedded Circuit               [0.0076s x1.00] (0.0077s x1.00 from start)
  (enter) Circuit Reader                        [             ] (0.0077s x1.00 from start)
    (enter) Construct Circuit                   [             ] (0.0078s x1.00 from start)
    (leave) Construct Circuit                   [0.0133s x1.00] (0.0211s x1.00 from start)
  (leave) Circuit Reader                        [0.0139s x1.00] (0.0216s x1.00 from start)
  (enter) Get ConstraintSystem from Gadgetlib2  [             ] (0.0216s x1.00 from start)
  (leave) Get ConstraintSystem from Gadgetlib2  [0.0163s x1.00] (0.0379s x1.00 from start)
(leave) Build Circuit                           [0.0379s x1.00] (0.0379s x1.00 from start)


Run Setup     : 
Context_ID    : 1
Call to R1CS GG-ppzkSNARK Generator
Swap is not beneficial, not performing
* G1 elements in PK: 19043
* Non-zero G1 elements in PK: 17943
* G2 elements in PK: 4644
* Non-zero G2 elements in PK: 3545
* PK size in bits: 6606686
* G1 elements in VK: 5
* G2 elements in VK: 2
* VK size in bits: 2804
End Call to R1CS GG-ppzkSNARK Generator
* G1 elements in PK: 19043
* Non-zero G1 elements in PK: 17943
* G2 elements in PK: 4644
* Non-zero G2 elements in PK: 3545
* PK size in bits: 6606686
* G1 elements in VK: 5
* G2 elements in VK: 2
* VK size in bits: 2804
Run Setup     : Done


Run Setup Profiling Info : 

(enter) Setup                                   [             ] (0.0000s x1.02 from start)
  (enter) Call to r1cs_gg_ppzksnark_generator   [             ] (0.0001s x1.02 from start)
    (enter) Call to r1cs_gg_ppzksnark_generator_from_secrets    [             ] (0.0002s x1.01 from start)
      (enter) Call to r1cs_constraint_system::swap_AB_if_beneficial     [             ] (0.0008s x1.00 from start)
        (enter) Estimate densities                      [             ] (0.0008s x1.00 from start)
          * Non-zero A-count (estimate): 3547
          * Non-zero B-count (estimate): 3544
        (leave) Estimate densities                      [0.0000s x0.98] (0.0008s x1.00 from start)
              (leave) Call to r1cs_constraint_system::swap_AB_if_beneficial     [0.0000s x1.00] (0.0008s x1.00 from start)
      * QAP number of variables: 4641
      * QAP pre degree: 4626
      * QAP degree: 5120
      * QAP number of input variables: 4
      (enter) Compute query densities                   [             ] (0.0157s x1.00 from start)
      (leave) Compute query densities                   [0.0000s x0.96] (0.0158s x1.00 from start)
      (enter) Compute ABC for R1CS verification key     [             ] (0.0158s x1.00 from start)
      (leave) Compute ABC for R1CS verification key     [0.0000s x1.33] (0.0158s x1.00 from start)
      (enter) Compute L query for R1CS proving key      [             ] (0.0158s x1.00 from start)
      (leave) Compute L query for R1CS proving key      [0.0007s x1.00] (0.0165s x1.00 from start)
      (enter) Generating G1 MSM window table            [             ] (0.0168s x1.00 from start)
        * G1 window: 11
      (leave) Generating G1 MSM window table            [0.0356s x1.00] (0.0523s x1.00 from start)
      (enter) Generating G2 MSM window table            [             ] (0.0524s x1.00 from start)
        * G2 window: 9
      (leave) Generating G2 MSM window table            [0.0512s x1.00] (0.1035s x1.00 from start)
      (enter) Generate R1CS proving key                 [             ] (0.1035s x1.00 from start)
        (enter) Generate queries                        [             ] (0.1059s x1.00 from start)
          (enter) Compute the A-query                   [             ] (0.1059s x1.00 from start)
          (leave) Compute the A-query                   [0.0108s x6.33] (0.1167s x1.49 from start)
          (enter) Compute the B-query                   [             ] (0.1167s x1.49 from start)
          (leave) Compute the B-query                   [0.0513s x9.07] (0.1680s x3.81 from start)
          (enter) Compute the H-query                   [             ] (0.1680s x3.81 from start)
          (leave) Compute the H-query                   [0.0142s x6.90] (0.1822s x4.05 from start)
          (enter) Compute the L-query                   [             ] (0.1822s x4.05 from start)
          (leave) Compute the L-query                   [0.0126s x6.88] (0.1949s x4.23 from start)
        (leave) Generate queries                        [0.0889s x8.08] (0.1949s x4.23 from start)
      (leave) Generate R1CS proving key                 [0.0913s x7.89] (0.1949s x4.23 from start)
      (enter) Generate R1CS verification key            [             ] (0.1949s x4.23 from start)
        (enter) Encode ABC for R1CS verification key    [             ] (0.1949s x4.23 from start)
        (leave) Encode ABC for R1CS verification key    [0.0003s x1.36] (0.1952s x4.23 from start)
      (leave) Generate R1CS verification key            [0.0003s x1.30] (0.1952s x4.23 from start)
    (leave) Call to r1cs_gg_ppzksnark_generator_from_secrets    [0.1950s x4.23] (0.1952s x4.23 from start)
  (leave) Call to r1cs_gg_ppzksnark_generator   [0.1959s x4.21] (0.1960s x4.21 from start)
(leave) Setup                                   [0.1959s x4.21] (0.1960s x4.21 from start)
Write Constraint System to File
  File : [/Users/mangoo/Documents/LibSNARK_C-/test/RealEstate_constraint_system.dat]
---- File Info ----
{
   "Auxiliary Input Size"         : 4637 , 
   "Binary Format"                : "MACOS_APPLE_SILICON" , 
   "Checksum"                     : "178b0a29e6785e94ba4b633b3ec3dcab9d2c6b9d41c59a437e30395f31b0e07c" , 
   "Compressed"                   : true , 
   "File Size"                    : 174630 , 
   "Full Assignments Size"        : 4641 , 
   "Num of Constraints"           : 4626 , 
   "Primary Input Size"           : 4 , 
   "Uncompressed Size"            : 1284505 , 
   "Zero VariableIdx Map Size"    : 0 , 
   "wire2variable Index Map Size" : 4641
}
-------------------
End of Writing Constraint System to file
Write Proof Key to file
  File : [/Users/mangoo/Documents/LibSNARK_C-/test/RealEstate_crs_pk.dat]
End of Writing Proof Key to file
Write Verify Key to file
  File : [/Users/mangoo/Documents/LibSNARK_C-/test/RealEstate_crs_vk.dat]
End of Writing Verify Key to file
<<<<  Verify Key Json  >>>>
{
   "ABC"         : [
      [
         "0x048B2D4AE51A90FB2878B0D40E950CBB52862815389946AB4727A48656CD9CE8" , 
         "0x0FF3C1C7D67E968CF4521F6A9E604B96A91C7618AC1A7FEE147C0FE616ED1785"
      ] , 
      [
         "0x182C167242CB2C1942785F200D60198C0BDDBC7E1A3598ED157C1614C8BED028" , 
         "0x00FFA44CF946EC066F25FB5493BF28C658094796122DC751410D2F732622BA2C"
      ] , 
      [
         "0x011CC596A609CAA595270ED4ABB2BD0EC68ECA67E2FDA09EA8DB81134C36453B" , 
         "0x14A43E444704EB3FDEEF8C7F7544CEAC77A8E0DB8BBD475E0F1C7FE3E98837FC"
      ] , 
      [
         "0x2426BB97F911DB7629EF03AA341249A40011676C1C66767EF2AE206D6461E335" , 
         "0x155C3369D03AFD6E4077072BA1710883BC2B832DBC48C9932A03B903D7CEF5D6"
      ] , 
      [
         "0x2F30B24BD0F5FE3FA966CAA9625DC30A434FE675C4CF18395E4555D9CD64154F" , 
         "0x0008E0C1AA6BC544E729A0A1BE1A2DE833D9B188333D8410D5FBD7A42E7D0565"
      ]
   ] , 
   "Domain Size" : 4 , 
   "Indices"     : [
      0 , 
      1 , 
      2 , 
      3
   ] , 
   "alpha"       : [
      "0x1508436DBA43B28373DE5A4EF62531945A89AD46A3F6A74109E6F487CBBE6178" , 
      "0x23976FA3EDA33D7566EDDCB185E8C0CDA4FEF13E8B31325638ACC7E69C34D5F7"
   ] , 
   "beta"        : [
      [
         "0x0610F861C408768CDC141596C83CB45896217086EE058736439AD139EE475301" , 
         "0x25482BFECD95F3A7C546164F7EFBE854C1753D4286B44C8054F38C8CF7D40BE9"
      ] , 
      [
         "0x2B00390FE2CB48305815CB29C937DE3D68BDBD6D63FEC66B8E69EB7A561EDC4A" , 
         "0x2C09CFF7200B06E57C000EC071302632924C4EF41A90318CEB464D40CEC75656"
      ]
   ] , 
   "delta"       : [
      [
         "0x1123112708A5888357CB690813AC169D1C9F5AD91F5B9DE086C4EAB19DC30559" , 
         "0x1931629535796F729E53BD197CEE8435207DFC5E91E19E4A76C1E7691537A975"
      ] , 
      [
         "0x2D8C33094816FC3D7F22F20D7EAFBEEA2CF1D70B1AA46202F0FD939E92DD8DA3" , 
         "0x09EE001F00FEDB0056AD5AAA4FCE6B2570281DF4A937709F7EB0655F894769A7"
      ]
   ]
}
<<<<              >>>>
finalize_circuit arguments :
context_id                 : 1
Deallocate 6690 Operators , 6959 Wires 

  <<<< 2 , success : using embedded [RealEstate] circuit generator with cs file [/Users/mangoo/Documents/LibSNARK_C-/test/RealEstate_constraint_system.dat] >>>> 

Verify Constraint System File Checksum
  File : [/Users/mangoo/Documents/LibSNARK_C-/test/RealEstate_constraint_system.dat]
  ---- File Info ----
{
   "Auxiliary Input Size"         : 4637 , 
   "Binary Format"                : "MACOS_APPLE_SILICON" , 
   "Checksum"                     : "178b0a29e6785e94ba4b633b3ec3dcab9d2c6b9d41c59a437e30395f31b0e07c" , 
   "Compressed"                   : true , 
   "File Size"                    : 174630 , 
   "Full Assignments Size"        : 4641 , 
   "Num of Constraints"           : 4626 , 
   "Primary Input Size"           : 4 , 
   "Uncompressed Size"            : 1284505 , 
   "Zero VariableIdx Map Size"    : 0 , 
   "wire2variable Index Map Size" : 4641
}
-------------------
End of Verify Constraint System File Checksum : Failed 
  <<<< 2 , Invalid Checksum, in file info : [178b0a29e6785e94ba4b633b3ec3dcab9d2c6b9d41c59a437e30395f31b0e07c] , computed : [016f7d0e929d227495160f0a5d399d1b08607a7df88cd8a63035816cc320fffc] >>>> 

finalize_circuit arguments :
context_id                 : 2

  <<<< 3 , success : using embedded [RealEstate] circuit generator >>>> 



BuildCircuit  :
Context_ID    : 3
Circuit Name  : RealEstate
Circuit Args  : 
    hashType : MiMC7 
    treeHeight : 32 
Running Circuit Generator for < RealEstate >

Embedded Circuit [RealEstate] Generation Done 
    Constraints     : 4626 
    Input Wires     : 4 
    Output Wires    : 0 
    Witness Wires   : 15 
    List of primary inputs to assign : 
                - CT_SKE_bondBalance 
                - H_monthlyRepaymentTable 
                - bondBalance 
                - bondKey 
                - cnt 
                - r_CT_SKE_bondBalance 
                - monthlyRepaymentTable , 12 
        ----------------------------------
Deallocate 0 Operators , 0 Wires 
create circuit reader 
numInputs:4 , numOutputs:0 , numNizkInputs:15 
Translating Constraints 
Translating Constraints : Done 
get constraint system 
Evaluate Inputs Done : Full Assignments:4641 ,  Primary Inputs:4 , Auxiliary Inputs:4637 
BuildCircuit  : Done


Build Circuit Profiling Info : 

(enter) Build Circuit                           [             ] (0.0000s x0.86 from start)
  (enter) Create Embedded Circuit               [             ] (0.0000s x0.99 from start)
  (leave) Create Embedded Circuit               [0.0042s x1.00] (0.0042s x1.00 from start)
  (enter) Circuit Reader                        [             ] (0.0042s x1.00 from start)
    (enter) Construct Circuit                   [             ] (0.0043s x1.00 from start)
    (leave) Construct Circuit                   [0.0087s x1.00] (0.0130s x1.00 from start)
  (leave) Circuit Reader                        [0.0092s x1.00] (0.0134s x1.00 from start)
  (enter) Get ConstraintSystem from Gadgetlib2  [             ] (0.0134s x1.00 from start)
  (leave) Get ConstraintSystem from Gadgetlib2  [0.0130s x1.00] (0.0264s x1.00 from start)
(leave) Build Circuit                           [0.0264s x1.00] (0.0264s x1.00 from start)
Read Proof Key from file
  File : [/Users/mangoo/Documents/LibSNARK_C-/test/RealEstate_crs_pk.dat]
  
* G1 elements in PK: 19043
* Non-zero G1 elements in PK: 17943
* G2 elements in PK: 4644
* Non-zero G2 elements in PK: 3545
* PK size in bits: 6606686
End of Reading Proof Key from file

Update primary inputs from json : 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_creditorPKE_bondKey] **
** Error : Unknown primary input name [CT_debtorPKE_bondKey] **
** Error : Unknown primary input name [CT_debtorPKE_loanAmountToReceive] **
** Error : Unknown primary input name [CT_loanAmountToReceive_debtor] ** 
** Error : Unknown primary input name [CT_loanAmountToReceive_debtor] ** 
** Error : Unknown primary input name [CT_loanAmountToReceive_debtor] ** 
** Error : Unknown primary input name [ENA_creditor] **
** Error : Unknown primary input name [ENA_debtor] **
** Error : Unknown primary input name [ENA_new_creditor] **
** Error : Unknown primary input name [ENA_old_creditor] **
** Error : Unknown primary input name [G] **
** Error : Unknown primary input name [G_PKE_loanAmountToReceive_debtor] **
** Error : Unknown primary input name [G_r] **
** Error : Unknown primary input name [G_r_PKE_loanAmountToReceive_debtor] **
** Error : Unknown primary input name [H_bondID] **
** Error : Unknown primary input name [H_loanAmountToReceive_debtor] **
** Error : Unknown primary input name [H_originalValue_creditor] **
** Error : Unknown primary input name [H_updateValue_creditor] **
** Error : Unknown primary input name [PK_enc_creditor] **
** Error : Unknown primary input name [PK_enc_debtor] **
** Error : Unknown primary input name [PK_own_debtor] **
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [datas_H_loanAmountToReceive_debtor] ** 
** Error : Unknown primary input name [datas_H_loanAmountToReceive_debtor] ** 
** Error : Unknown primary input name [datas_H_loanAmountToReceive_debtor] ** 
** Error : Unknown primary input name [direction] **
** Error : Unknown primary input name [index_bondID] **
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [k_ENA_creditor] **
** Error : Unknown primary input name [k_PKE_loanAmountToReceive_debtor] **
** Error : Unknown primary input name [loanAmountToReceive_debtor] **
** Error : Unknown primary input name [nf_creditor] **
** Error : Unknown primary input name [pk_own_creditor] **
** Error : Unknown primary input name [r_CT_SKE_bondData] **
** Error : Unknown primary input name [r_ENA_creditor] **
** Error : Unknown primary input name [r_G] **
** Error : Unknown primary input name [r_H_loanAmountToReceive_debtor] **
** Error : Unknown primary input name [r_H_originalValue_creditor] **
** Error : Unknown primary input name [r_H_updateValue_creditor] **
** Error : Unknown primary input name [r_PKE_loanAmountToReceive_debtor] **
** Error : Unknown primary input name [r_SKE_loanAmountToReceive_debtor] **
** Error : Unknown primary input name [r_debtorPKE] **
** Error : Unknown primary input name [r_old_ENA_creditor] **
** Error : Unknown primary input name [rt] **
** Error : Unknown primary input name [sk_own_creditor] **
** Error : Unknown primary input name [value_ENA_new_creditor] **
** Error : Unknown primary input name [value_ENA_old_creditor] **
** Error : Unknown primary input name [wt] **


Run Proof     :
Context_ID    : 3
Evaluating Inputs
Assign Primary Input [CT_SKE_bondBalance]=13ff3056e691af93d1242b2eb7e8f0ede9026034a15e18711bda50676a69d41c
Assign Primary Input [H_monthlyRepaymentTable]=131bff4e3bbab3c38e7961682919cf9920fa6a49e8d03170f290018596dbd7c7
Assign Primary Input [bondBalance]=7270e00
Assign Primary Input [bondKey]=37f311b6480079c76dcb85eade8885ef329fe6411a7f8926a73ff40cbbf1b986
Assign Primary Input [cnt]=1
Assign Primary Input [r_CT_SKE_bondBalance]=448172f1e79b205c97d4e332d53ba0eb5c27a1a9612244d939a4d44e1156915
Assign Primary Input [monthlyRepaymentTable][0]=68e7780 
Assign Primary Input [monthlyRepaymentTable][1]=5f5e100 
Assign Primary Input [monthlyRepaymentTable][2]=55d4a80 
Assign Primary Input [monthlyRepaymentTable][3]=4c4b400 
Assign Primary Input [monthlyRepaymentTable][4]=42c1d80 
Assign Primary Input [monthlyRepaymentTable][5]=3938700 
Assign Primary Input [monthlyRepaymentTable][6]=2faf080 
Assign Primary Input [monthlyRepaymentTable][7]=2625a00 
Assign Primary Input [monthlyRepaymentTable][8]=1c9c380 
Assign Primary Input [monthlyRepaymentTable][9]=1312d00 
Assign Primary Input [monthlyRepaymentTable][10]=989680 
Assign Primary Input [monthlyRepaymentTable][11]=0 
Running Circuit Evaluator for < RealEstate > Circuit Evaluation Done for < RealEstate >

Parsing and evaluating the inputs
Map values to protoboard
Evaluate Inputs Done : Full Assignments:4641 ,  Primary Inputs:4 , Auxiliary Inputs:4637 
Call to R1CS GG-ppzkSNARK Prover
Swap is not beneficial, not performing
End Call to R1CS GG-ppzkSNARK Prover
Run Proof     : Done


Run Proof Profiling Info : 

(enter) Generate Auxiliary Inputs               [             ] (0.0000s x1.06 from start)
  (enter) generator->evalCircuit()              [             ] (0.0000s x0.97 from start)
  (leave) generator->evalCircuit()              [0.0021s x0.99] (0.0021s x0.99 from start)
  (enter) reader_2->evaluate_inputs()           [             ] (0.0021s x0.99 from start)
    (enter) Parsing and evaluating the inputs   [             ] (0.0022s x0.99 from start)
    (leave) Parsing and evaluating the inputs   [0.0000s x1.00] (0.0022s x0.99 from start)
    (enter) Map values to protoboard            [             ] (0.0032s x0.99 from start)
    (leave) Map values to protoboard            [0.0089s x1.00] (0.0121s x1.00 from start)
  (leave) reader_2->evaluate_inputs()           [0.0099s x1.00] (0.0121s x1.00 from start)
(leave) Generate Auxiliary Inputs               [0.0136s x0.99] (0.0136s x0.99 from start)
(enter) Proof                                   [             ] (0.0141s x0.99 from start)
  (enter) Call to r1cs_gg_ppzksnark_prover      [             ] (0.0141s x0.99 from start)
    (enter) swap_AB_if_beneficial               [             ] (0.0141s x0.99 from start)
      (enter) Call to r1cs_constraint_system::swap_AB_if_beneficial     [             ] (0.0145s x0.99 from start)
        (enter) Estimate densities                      [             ] (0.0145s x0.99 from start)
          * Non-zero A-count (estimate): 3547
          * Non-zero B-count (estimate): 3544
        (leave) Estimate densities                      [0.0000s x0.98] (0.0146s x0.99 from start)
              (leave) Call to r1cs_constraint_system::swap_AB_if_beneficial     [0.0000s x1.01] (0.0146s x0.99 from start)
    (leave) swap_AB_if_beneficial               [0.0005s x1.00] (0.0146s x0.99 from start)
    (enter) Compute the polynomial H            [             ] (0.0146s x0.99 from start)
    (leave) Compute the polynomial H            [0.0226s x2.21] (0.0372s x1.74 from start)
    (enter) Compute the proof                   [             ] (0.0503s x1.55 from start)
      (enter) Compute evaluation to A-query             [             ] (0.0503s x1.55 from start)
      (leave) Compute evaluation to A-query             [0.0215s x7.05] (0.0717s x3.19 from start)
      (enter) Compute evaluation to B-query             [             ] (0.0718s x3.19 from start)
      (leave) Compute evaluation to B-query             [0.0948s x9.44] (0.1666s x6.75 from start)
      (enter) Compute evaluation to H-query             [             ] (0.1666s x6.75 from start)
      (leave) Compute evaluation to H-query             [0.0242s x8.44] (0.1907s x6.96 from start)
      (enter) Compute evaluation to L-query             [             ] (0.1908s x6.96 from start)
      (leave) Compute evaluation to L-query             [0.0264s x6.66] (0.2171s x6.93 from start)
    (leave) Compute the proof                   [0.1688s x8.46] (0.2191s x6.87 from start)
  (leave) Call to r1cs_gg_ppzksnark_prover      [0.2050s x7.28] (0.2191s x6.87 from start)
  * G1 elements in proof: 2
  * G2 elements in proof: 1
  * Proof size in bits: 1019
(leave) Proof                                   [0.2058s x7.25] (0.2199s x6.85 from start)
<<<<  Proof Json  >>>>
{
   "a" : [
      "0x234FBFA3951D72A731BC5485BA041F89017622188B2CC81864C99C452CF83F8F" , 
      "0x2CF1E368914A4D74C1B614981BB60538A7EB92D35B92F55D82B466DBA985399C"
   ] , 
   "b" : [
      [
         "0x1F1657607A946824929DD41870D6511DE79AEF33085FA2ACC3D456C36440144D" , 
         "0x06B55E36EF8CC6CFAE09C5C3C2216D4C0D65F6CB0099E8F0A8AFE0C560553F4F"
      ] , 
      [
         "0x108DF6620A50F51566665D813396B728C423E20BDEA46F83A98F730CBE4B0CB9" , 
         "0x0483FAE98AE40E42828A370329D5121637569949D7C0AEE212DE1FA00A3EEE4D"
      ]
   ] , 
   "c" : [
      "0x0EDB6EC99D8BA41158C1178974688557398C692F167F470A0E14E62AB40E1CC4" , 
      "0x25709FF97F779B12E0B293973BF2F16819C58B42B9CC32F5B01FF1CD56ACDC24"
   ]
}
<<<<              >>>>
finalize_circuit arguments :
context_id                 : 3
Deallocate 6690 Operators , 6959 Wires 

  <<<< 4 , success : using embedded [RealEstate] circuit generator >>>> 



BuildCircuit  :
Context_ID    : 4
Circuit Name  : RealEstate
Circuit Args  : 
    hashType : MiMC7 
    treeHeight : 32 
Running Circuit Generator for < RealEstate >

Embedded Circuit [RealEstate] Generation Done 
    Constraints     : 4626 
    Input Wires     : 4 
    Output Wires    : 0 
    Witness Wires   : 15 
    List of primary inputs to assign : 
                - CT_SKE_bondBalance 
                - H_monthlyRepaymentTable 
                - bondBalance 
                - bondKey 
                - cnt 
                - r_CT_SKE_bondBalance 
                - monthlyRepaymentTable , 12 
        ----------------------------------
Deallocate 0 Operators , 0 Wires 
create circuit reader 
numInputs:4 , numOutputs:0 , numNizkInputs:15 
Translating Constraints 
Translating Constraints : Done 
get constraint system 
Evaluate Inputs Done : Full Assignments:4641 ,  Primary Inputs:4 , Auxiliary Inputs:4637 
BuildCircuit  : Done


Build Circuit Profiling Info : 

(enter) Build Circuit                           [             ] (0.0000s x0.89 from start)
  (enter) Create Embedded Circuit               [             ] (0.0000s x0.97 from start)
  (leave) Create Embedded Circuit               [0.0042s x0.99] (0.0043s x0.99 from start)
  (enter) Circuit Reader                        [             ] (0.0043s x0.99 from start)
    (enter) Construct Circuit                   [             ] (0.0043s x0.99 from start)
    (leave) Construct Circuit                   [0.0085s x1.00] (0.0128s x1.00 from start)
  (leave) Circuit Reader                        [0.0088s x1.00] (0.0131s x1.00 from start)
  (enter) Get ConstraintSystem from Gadgetlib2  [             ] (0.0131s x1.00 from start)
  (leave) Get ConstraintSystem from Gadgetlib2  [0.0135s x1.00] (0.0266s x1.00 from start)
(leave) Build Circuit                           [0.0266s x1.00] (0.0266s x1.00 from start)
Read Proof Key from file
  File : [/Users/mangoo/Documents/LibSNARK_C-/test/RealEstate_crs_pk.dat]
  
* G1 elements in PK: 19043
* Non-zero G1 elements in PK: 17943
* G2 elements in PK: 4644
* Non-zero G2 elements in PK: 3545
* PK size in bits: 6606686
End of Reading Proof Key from file

Update primary inputs from json : 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_SKE_bondData] ** 
** Error : Unknown primary input name [CT_creditorPKE_bondKey] **
** Error : Unknown primary input name [CT_debtorPKE_bondKey] **
** Error : Unknown primary input name [CT_debtorPKE_loanAmountToReceive] **
** Error : Unknown primary input name [CT_loanAmountToReceive_debtor] ** 
** Error : Unknown primary input name [CT_loanAmountToReceive_debtor] ** 
** Error : Unknown primary input name [CT_loanAmountToReceive_debtor] ** 
** Error : Unknown primary input name [ENA_creditor] **
** Error : Unknown primary input name [ENA_debtor] **
** Error : Unknown primary input name [ENA_new_creditor] **
** Error : Unknown primary input name [ENA_old_creditor] **
** Error : Unknown primary input name [G] **
** Error : Unknown primary input name [G_PKE_loanAmountToReceive_debtor] **
** Error : Unknown primary input name [G_r] **
** Error : Unknown primary input name [G_r_PKE_loanAmountToReceive_debtor] **
** Error : Unknown primary input name [H_bondID] **
** Error : Unknown primary input name [H_loanAmountToReceive_debtor] **
** Error : Unknown primary input name [H_originalValue_creditor] **
** Error : Unknown primary input name [H_updateValue_creditor] **
** Error : Unknown primary input name [PK_enc_creditor] **
** Error : Unknown primary input name [PK_enc_debtor] **
** Error : Unknown primary input name [PK_own_debtor] **
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [bondData] ** 
** Error : Unknown primary input name [datas_H_loanAmountToReceive_debtor] ** 
** Error : Unknown primary input name [datas_H_loanAmountToReceive_debtor] ** 
** Error : Unknown primary input name [datas_H_loanAmountToReceive_debtor] ** 
** Error : Unknown primary input name [direction] **
** Error : Unknown primary input name [index_bondID] **
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [intermediateHashes] ** 
** Error : Unknown primary input name [k_ENA_creditor] **
** Error : Unknown primary input name [k_PKE_loanAmountToReceive_debtor] **
** Error : Unknown primary input name [loanAmountToReceive_debtor] **
** Error : Unknown primary input name [nf_creditor] **
** Error : Unknown primary input name [pk_own_creditor] **
** Error : Unknown primary input name [r_CT_SKE_bondData] **
** Error : Unknown primary input name [r_ENA_creditor] **
** Error : Unknown primary input name [r_G] **
** Error : Unknown primary input name [r_H_loanAmountToReceive_debtor] **
** Error : Unknown primary input name [r_H_originalValue_creditor] **
** Error : Unknown primary input name [r_H_updateValue_creditor] **
** Error : Unknown primary input name [r_PKE_loanAmountToReceive_debtor] **
** Error : Unknown primary input name [r_SKE_loanAmountToReceive_debtor] **
** Error : Unknown primary input name [r_debtorPKE] **
** Error : Unknown primary input name [r_old_ENA_creditor] **
** Error : Unknown primary input name [rt] **
** Error : Unknown primary input name [sk_own_creditor] **
** Error : Unknown primary input name [value_ENA_new_creditor] **
** Error : Unknown primary input name [value_ENA_old_creditor] **
** Error : Unknown primary input name [wt] **


Run Verify    :
Context_ID    : 4
Evaluating Inputs
Assign Primary Input [CT_SKE_bondBalance]=13ff3056e691af93d1242b2eb7e8f0ede9026034a15e18711bda50676a69d41c
Assign Primary Input [H_monthlyRepaymentTable]=131bff4e3bbab3c38e7961682919cf9920fa6a49e8d03170f290018596dbd7c7
Assign Primary Input [bondBalance]=7270e00
Assign Primary Input [bondKey]=37f311b6480079c76dcb85eade8885ef329fe6411a7f8926a73ff40cbbf1b986
Assign Primary Input [cnt]=1
Assign Primary Input [r_CT_SKE_bondBalance]=448172f1e79b205c97d4e332d53ba0eb5c27a1a9612244d939a4d44e1156915
Assign Primary Input [monthlyRepaymentTable][0]=68e7780 
Assign Primary Input [monthlyRepaymentTable][1]=5f5e100 
Assign Primary Input [monthlyRepaymentTable][2]=55d4a80 
Assign Primary Input [monthlyRepaymentTable][3]=4c4b400 
Assign Primary Input [monthlyRepaymentTable][4]=42c1d80 
Assign Primary Input [monthlyRepaymentTable][5]=3938700 
Assign Primary Input [monthlyRepaymentTable][6]=2faf080 
Assign Primary Input [monthlyRepaymentTable][7]=2625a00 
Assign Primary Input [monthlyRepaymentTable][8]=1c9c380 
Assign Primary Input [monthlyRepaymentTable][9]=1312d00 
Assign Primary Input [monthlyRepaymentTable][10]=989680 
Assign Primary Input [monthlyRepaymentTable][11]=0 
Running Circuit Evaluator for < RealEstate > Circuit Evaluation Done for < RealEstate >

Parsing and evaluating the inputs
Map values to protoboard
Evaluate Inputs Done : Full Assignments:4641 ,  Primary Inputs:4 , Auxiliary Inputs:4637 
Call to run_r1cs_gg_ppzksnark verify
Preprocess verification key
R1CS GG-ppzkSNARK Online Verifier
Skipping the following pair (62 bit number vs 56 bit):
2315041333989790233
36519590549616985
Skipping the following pair (56 bit number vs 1 bit):
36519590549616985
1
* The verification result is: PASS
End Call to run_r1cs_gg_ppzksnark verify
Run Verify    : successBit = 1 [ Success ] 


Run Verify Profiling Info : 

(enter) Generate Auxiliary Inputs               [             ] (0.0000s x0.84 from start)
  (enter) generator->evalCircuit()              [             ] (0.0000s x0.97 from start)
  (leave) generator->evalCircuit()              [0.0019s x0.96] (0.0019s x0.96 from start)
  (enter) reader_2->evaluate_inputs()           [             ] (0.0019s x0.96 from start)
    (enter) Parsing and evaluating the inputs   [             ] (0.0019s x0.96 from start)
    (leave) Parsing and evaluating the inputs   [0.0000s x1.05] (0.0019s x0.96 from start)
    (enter) Map values to protoboard            [             ] (0.0030s x0.97 from start)
    (leave) Map values to protoboard            [0.0090s x1.00] (0.0120s x0.99 from start)
  (leave) reader_2->evaluate_inputs()           [0.0101s x1.00] (0.0120s x0.99 from start)
(leave) Generate Auxiliary Inputs               [0.0132s x0.99] (0.0132s x0.99 from start)
(enter) Verify                                  [             ] (0.0137s x0.99 from start)
  (enter) Call to r1cs_gg_ppzksnark_verifier_process_vk [             ] (0.0137s x0.99 from start)
  (leave) Call to r1cs_gg_ppzksnark_verifier_process_vk [0.0009s x1.00] (0.0146s x0.99 from start)
  (enter) Call to r1cs_gg_ppzksnark_online_verifier_strong_IC   [             ] (0.0148s x0.99 from start)
    (enter) Call to r1cs_gg_ppzksnark_online_verifier_weak_IC   [             ] (0.0148s x0.99 from start)
      (enter) Accumulate input                          [             ] (0.0148s x0.99 from start)
      (leave) Accumulate input                          [0.0006s x1.00] (0.0153s x0.99 from start)
      (enter) Check if the proof is well-formed         [             ] (0.0153s x0.99 from start)
      (leave) Check if the proof is well-formed         [0.0000s x1.05] (0.0153s x0.99 from start)
      (enter) Online pairing computations               [             ] (0.0154s x0.99 from start)
        (enter) Check QAP divisibility                  [             ] (0.0154s x0.99 from start)
        (leave) Check QAP divisibility                  [0.0056s x1.00] (0.0209s x1.00 from start)
      (leave) Online pairing computations               [0.0056s x1.00] (0.0209s x1.00 from start)
    (leave) Call to r1cs_gg_ppzksnark_online_verifier_weak_IC   [0.0062s x1.00] (0.0210s x1.00 from start)
  (leave) Call to r1cs_gg_ppzksnark_online_verifier_strong_IC   [0.0062s x1.00] (0.0210s x1.00 from start)
(leave) Verify                                  [0.0073s x1.00] (0.0210s x1.00 from start)

 Verify 1 :   <<<< 0 , success >>>> 

finalize_circuit arguments :
context_id                 : 4
Deallocate 6690 Operators , 6959 Wires 
    ~/Documents/LibSNARK_C-/test    main !12 ?1                                                                                          ✔ 